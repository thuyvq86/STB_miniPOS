package com.stb.minipos.ui;

import java.util.Observable;
import java.util.Observer;
import java.util.Timer;

import android.os.Bundle;
import android.os.Handler;
import android.view.Window;
import android.widget.TextView;

import com.crashlytics.android.Crashlytics;
import com.google.gson.Gson;
import com.stb.minipos.R;
import com.stb.minipos.model.STBApiManager;
import com.stb.minipos.model.STBApiManager.ApiResponseData;
import com.stb.minipos.model.dao.STBResponseVersion;

public class SplashActivity extends BaseActivity implements Observer {
	private Timer timer;
	private Handler handler;
	private boolean isCanceled = false;
	private TextView txtStatus;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_splash);
		STBApiManager.instance().addObserver(this);

		txtStatus = (TextView) findViewById(R.id.txtStatus);

		timer = new Timer();

		// timer.schedule(new TimerTask() {
		// @Override
		// public void run() {
		// timer = null;
		// if (!isCanceled) {
		// Intent intent = new Intent(SplashActivity.this,
		// MiniPosActivity.class);
		// startActivity(intent);
		// finish();
		// }
		// }
		// }, 2000);

		handler = new Handler();
		handler.postDelayed(new Runnable() {
			@Override
			public void run() {
				handler = null;
				if (SplashActivity.this != null
						&& !SplashActivity.this.isFinishing())
					Crashlytics.start(SplashActivity.this);
			}
		}, 100);
	}

	@Override
	protected void onResume() {
		super.onResume();
		if (checkNetworkSettings()) {
			checkVersion();
		}
	}

	public void checkVersion() {
		txtStatus.setText("Checking application version...");
		STBApiManager.instance().getVersion();
	}

	public void handleCheckVersionResponse(ApiResponseData response) {
		if (response != null && response.isSuccess
				&& response.stbResponse.isSuccess()) {
			STBResponseVersion version = (STBResponseVersion) response.stbResponse
					.getData();
			
		}
		System.out.println(new Gson().toJson(response));
	}

	private void cancelTask() {
		if (timer != null) {
			try {
				timer.cancel();
				isCanceled = true;
			} catch (Exception e) {
				e.printStackTrace();
			}
			timer = null;
		}
	}

	@Override
	public void finish() {
		super.finish();
		cancelTask();
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		cancelTask();
		STBApiManager.instance().deleteObserver(this);
	}

	@Override
	public void update(Observable observable, Object data) {
		super.update(observable, data);
		if (observable == STBApiManager.instance()) {
			handleCheckVersionResponse((ApiResponseData) data);
		}
	}

}
